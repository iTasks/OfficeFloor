~~~
~~ #%L
~~ Transaction HTTP Server Tutorial
~~ %%
~~ Copyright (C) 2005 - 2020 Daniel Sagenschneider
~~ %%
~~ This program is free software: you can redistribute it and/or modify
~~ it under the terms of the GNU Affero General Public License as published by
~~ the Free Software Foundation, either version 3 of the License, or
~~ (at your option) any later version.
~~ 
~~ This program is distributed in the hope that it will be useful,
~~ but WITHOUT ANY WARRANTY; without even the implied warranty of
~~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
~~ GNU General Public License for more details.
~~ 
~~ You should have received a copy of the GNU Affero General Public License
~~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
~~ #L%
~~~

                                               -----------------------
                                           Transaction HTTP Server Tutorial
                                               -----------------------
                                                Daniel Sagenschneider
                                               -----------------------

Transaction HTTP Server Tutorial

  This tutorial demonstrates providing transaction context to an OfficeFloor web application.  OfficeFloor refers to context as {{{/apidocs/net/officefloor/frame/api/governance/Governance.html}Governance}}.
  
  The example used for this tutorial is adding posts via a REST service.

  {{{https://github.com/officefloor/OfficeFloor/tree/master/officefloor/tutorials/TransactionHttpServer}Tutorial Source}}



*Configuration

  The following is the <<<application.woof>>> configuration for the example application.

[./images/transaction-woof.png] application.woof configuration.


**Transaction (Governance) configuration

  The transaction is managed via {{{/apidocs/net/officefloor/compile/spi/governance/source/GovernanceSource.html}GovernanceSource}}.  This is a generic means to provide context around logic with the application.
  
  In this particular case, the {{{/apidocs/net/officefloor/spring/data/SpringDataTransactionGovernanceSource.html}SpringDataTransactionGovernanceSource}} is used to provide transaction management over Spring repositories.

  To enable transaction management, add a Governance item.  Once added, the scope of the transaction (governance) must be specified.  This is achieved by adding the area around all logic in scope for the transaction.  Logic components within the area will be managed by the transaction.
  
  The transaction will be started when flow moves from a logic component outside the area to a logic component within the area.
  
  The transaction will end in either two ways:
  
   * normal flow moves to a logic component outside the transaction (causing the transaction to commit)
   
   * exception handling outside the area (causing the transaction to rollback)
   
  Note: that exception handling within the transaction area will continue the transaction.
  
  Note: completing the flow within the transaction scope also commits the transaction.
  

**Spring Data integration

  To enable use of Spring data in OfficeFloor's multi-threaded {{{/apidocs/net/officefloor/frame/api/team/Team.html}Team}} environment, add the following dependency:
  
%{snippet|id=tutorial|file=${basedir}/pom.xml}

  This will ensure the Spring Data transaction thread locals are propagated across Threads. 
  


*Application logic

  The transaction logic is as follows:
  
%{snippet|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/transactionhttpserver/TransactionLogic.java}

  This will attempt to write two posts to the database.  As per the configuration, the exception handled is either within the transaction (committing) or outside (roll back).
    
  The application also has the following {{{/apidocs/net/officefloor/frame/api/team/Team.html}Team}} configuration to demonstrate Spring Data transaction working across threads.
  
%{snippet|file=${basedir}/src/main/resources/application.teams}



*Unit Test
  
  The following unit test demonstrates committing the transaction (as exception handled within transaction). 

%{snippet|id=commit|file=${basedir}/src/test/java/net/officefloor/tutorial/transactionhttpserver/TransactionHttpServerTest.java}

  The following unit test demonstrates rolling back the transaction (as exception handled outside transaction scope).

%{snippet|id=rollback|file=${basedir}/src/test/java/net/officefloor/tutorial/transactionhttpserver/TransactionHttpServerTest.java}



Next

  The {{{../ReactorHttpServer/index.html}next tutorial}} covers using Reactive logic.

