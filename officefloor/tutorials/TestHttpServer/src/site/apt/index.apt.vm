~~~
~~ #%L
~~ Test HTTP Server Tutorial
~~ %%
~~ Copyright (C) 2005 - 2020 Daniel Sagenschneider
~~ %%
~~ This program is free software: you can redistribute it and/or modify
~~ it under the terms of the GNU Affero General Public License as published by
~~ the Free Software Foundation, either version 3 of the License, or
~~ (at your option) any later version.
~~ 
~~ This program is distributed in the hope that it will be useful,
~~ but WITHOUT ANY WARRANTY; without even the implied warranty of
~~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
~~ GNU General Public License for more details.
~~ 
~~ You should have received a copy of the GNU Affero General Public License
~~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
~~ #L%
~~~

                                               -----------------------
                                                    Test Tutorial 
                                               -----------------------
                                                Daniel Sagenschneider
                                               -----------------------

Test Tutorial

  This tutorial looks at testing a WoOF application.
    
  To focus on testing, the below simple application to add two numbers will be used.
    
[./images/TestHttpServer-screenshot.png] TestHttpServer screen shot.

  {{{https://github.com/officefloor/OfficeFloor/tree/master/officefloor/tutorials/TestHttpServer}Tutorial Source}}

  Furthermore, production quality testing would cover a lot more test scenarios than is covered in this tutorial.  The additional scenarios, however, have been excluded for brevity.  They would all follow a similar pattern as described by this tutorial.



*Application code

  The application being tested has one page.

%{snippet|file=${basedir}/src/main/resources/template.woof.html|ignoreDownloadError=false}

  With the backing logic class.
  
%{snippet|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/testhttpserver/TemplateLogic.java|ignoreDownloadError=false}

  And injected dependency.
  
%{snippet|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/testhttpserver/Calculator.java|ignoreDownloadError=false}



*Unit Testing

  The following demonstrates unit testing the template logic class.  As the template logic class is a POJO (Plain Old Java Object), it is unit tested like any other Java class.

%{snippet|id=unit|file=${basedir}/src/test/java/net/officefloor/tutorial/testhttpserver/TemplateLogicTest.java|ignoreDownloadError=false}

  This is a simple application.  More complex applications may be dependency injecting more complex objects such as a <<<java.sql.Connection>>> or <<<javax.persistence.EntityManager>>>.  Again as the template logic is a POJO, any mocking framework can be used to mock these objects for use in testing.
  


*System Testing

  As OfficeFloor is a very light weight framework, it starts and stops fast enough to be run with the unit tests.
  
  The following demonstrates using the mock WoOF server.  This server executes very fast, as there is no socket communication.  Requests are passed in memory to the server making it very fast for testing.  This also has the benefit of avoiding port binding clashes on shared build servers.

%{snippet|id=system|file=${basedir}/src/test/java/net/officefloor/tutorial/testhttpserver/TemplateLogicTest.java|ignoreDownloadError=false}

  JUnit 4 example:

%{snippet|id=system|file=${basedir}/src/test/java/net/officefloor/tutorial/testhttpserver/TemplateLogicJUnit4Test.java|ignoreDownloadError=false}


**Live HTTP Sockets

  However, should you want to run WoOF listening on sockets, then use the following. Again this is fast enough to run with the unit tests, but is neglibly slower due to socket communication.

%{snippet|id=full-system|file=${basedir}/src/test/java/net/officefloor/tutorial/testhttpserver/TemplateLogicCallingTest.java|ignoreDownloadError=false}

  JUnit 4 example:

%{snippet|id=full-system|file=${basedir}/src/test/java/net/officefloor/tutorial/testhttpserver/TemplateLogicJUnit4Test.java|ignoreDownloadError=false}


*Injecting dependencies into Tests

  Dependencies managed by OfficeFloor can also be injected into tests.
  
%{snippet|id=inject-dependency|file=${basedir}/src/test/java/net/officefloor/tutorial/testhttpserver/TemplateLogicTest.java|ignoreDownloadError=false}

  JUnit 4 example:

%{snippet|id=inject-dependency|file=${basedir}/src/test/java/net/officefloor/tutorial/testhttpserver/TemplateLogicJUnit4Test.java|ignoreDownloadError=false}



*Integration Testing

  OfficeFloor provides a {{{http://maven.apache.org}Maven}} plug-in to enable integration testing.  The following is the <<<pom.xml>>> plug-ins configuration of running integration tests.
  
%{snippet|id=tutorial|file=${basedir}/pom.xml|ignoreDownloadError=false}

  The integration test is then as follows.
  
%{snippet|id=integration|file=${basedir}/src/test/int/net/officefloor/tutorial/testhttpserver/TemplateLogicIT.java|ignoreDownloadError=false}

  JUnit 4 example:

%{snippet|id=integration|file=${basedir}/src/test/int/net/officefloor/tutorial/testhttpserver/TemplateLogicJUnit4IT.java|ignoreDownloadError=false}

  While this is a simple request test, it also enables using more complex integration test tools (e.g. {{{http://seleniumhq.org}SeleniumHQ}}).



Next

  The {{{../EnvironmentHttpServer/index.html}next tutorial}} looks at configuring OfficeFloor applications.

