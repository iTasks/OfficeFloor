~~~
~~ #%L
~~ Dependency Injection of a POJO HTTP Server Tutorial
~~ %%
~~ Copyright (C) 2005 - 2020 Daniel Sagenschneider
~~ %%
~~ This program is free software: you can redistribute it and/or modify
~~ it under the terms of the GNU Affero General Public License as published by
~~ the Free Software Foundation, either version 3 of the License, or
~~ (at your option) any later version.
~~ 
~~ This program is distributed in the hope that it will be useful,
~~ but WITHOUT ANY WARRANTY; without even the implied warranty of
~~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
~~ GNU General Public License for more details.
~~ 
~~ You should have received a copy of the GNU Affero General Public License
~~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
~~ #L%
~~~

                                               -----------------------
                            Dependency Injection of a Plain Old Java Object (POJO) Tutorial 
                                               -----------------------
                                                Daniel Sagenschneider
                                               -----------------------

Dependency Injection Tutorial

  This tutorial demonstrates the dependency injection of a Plain Old Java Object (POJO).
  
  The example used in this tutorial is the following simple application to render a message to screen.  Part of the message is obtained from a dependency injected POJO.
  
[./images/DiPojoHttpServer-screenshot.png] DiPojoHttpServer screen shot.
  
  {{{https://github.com/officefloor/OfficeFloor/tree/master/officefloor/tutorials/DiPojoHttpServer}Tutorial Source}}



*Template
  
  The following is the content of the template.

%{snippet|file=${basedir}/src/main/resources/Template.woof.html|ignoreDownloadError=false}

  With the template logic.

%{snippet|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/dipojohttpserver/TemplateLogic.java|ignoreDownloadError=false}

  WoOF (via its underlying OfficeFloor framework) injects dependencies into methods.  By injecting dependencies into methods, WoOF makes development of applications simpler.  This is because the application logic is written as loosely coupled methods rather than highly coupled objects.  See {{{https://sagenschneider.blogspot.com/2019/02/inversion-of-coupling-control.html}Inversion of Coupling Control}} for more details.
  
  The injected dependency (POJO) will provide the remaining text of the rendered content.  The code of the injected POJO is as follows.

%{snippet|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/dipojohttpserver/Pojo.java|ignoreDownloadError=false}


*Object Dependencies

  While templates, {{{https://sagenschneider.blogspot.com/2019/06/local-microservices-first-class.html}first-class procedures}} and other continuous integration aspects inject into methods.  The injected objects themselves may also have dependencies.
  
  Injection into objects can be done by the following various means.

**Field Injection

%{snippet|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/dipojohttpserver/field/FieldInjectedPojo.java|ignoreDownloadError=false}

**Setter Injection

%{snippet|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/dipojohttpserver/setter/SetterInjectedPojo.java|ignoreDownloadError=false}
  
**Constructor Injection

%{snippet|id=tutorial|file=${basedir}/src/main/java/net/officefloor/tutorial/dipojohttpserver/constructor/ConstructorInjectedPojo.java|ignoreDownloadError=false}

  Should there be more than one constructor, the constructor to use for dependency injection can be specified by adding a {{{/apidocs/net/officefloor/plugin/clazz/Dependency.html}@Dependency}} annotation.
  
  

*Configuring Dependency Injection

  Objects for dependency injection are configured in the <<<application.objects>>> file contained at the root of the class path.  Providing this file is optional, as it is anticipated that WoOF annotations will provide most POJO dependency configuration.  However, it is supported to extend WoOF applications with additional dependencies as required.

  Note that OfficeFloor does not do class path scanning.  While this is convenient, any decent sized application will be slow to start.  This makes class path scanning not appropriate for scale to zero applications due to slow start up times.  Hence, OfficeFloor avoids class path scanning.
      
  The configuration of dependency injecting the POJO is as follows.

%{snippet|file=${basedir}/src/main/resources/application.objects|ignoreDownloadError=false}
  
  The configuration above instantiates the POJOs.  Should more complex logic be required, please see the tutorial on {{{../DatabaseHttpServer/index.html}managed object source}}.

  WoOF auto-wires dependency injection based on type.  Auto-wiring dependencies based on type is adequate (and much easier) for the majority of applications.  WoOF's underlying OfficeFloor framework does provide manual dependency configuration, however this is seldom used as WoOF allows qualifying dependencies for auto-wiring.



*Unit Test

  The unit test ensures the correct rendered content is received.

%{snippet|id=test|file=${basedir}/src/test/java/net/officefloor/tutorial/dipojohttpserver/DiPojoHttpServerTest.java|ignoreDownloadError=false}

  JUnit 4 example:

%{snippet|id=test|file=${basedir}/src/test/java/net/officefloor/tutorial/dipojohttpserver/DiPojoHttpServerJUnit4Test.java|ignoreDownloadError=false}


Next

  The {{{../TeamHttpServer/index.html}next tutorial}} covers thread injection.
